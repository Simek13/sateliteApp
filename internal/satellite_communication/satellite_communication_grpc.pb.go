// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package satellitecommunication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SatelliteCommunicationClient is the client API for SatelliteCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SatelliteCommunicationClient interface {
	GetMeasurements(ctx context.Context, in *SatelliteFilter, opts ...grpc.CallOption) (*MeasurementResponse, error)
	GetComputations(ctx context.Context, in *SatelliteFilter, opts ...grpc.CallOption) (*ComputationResponse, error)
}

type satelliteCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewSatelliteCommunicationClient(cc grpc.ClientConnInterface) SatelliteCommunicationClient {
	return &satelliteCommunicationClient{cc}
}

func (c *satelliteCommunicationClient) GetMeasurements(ctx context.Context, in *SatelliteFilter, opts ...grpc.CallOption) (*MeasurementResponse, error) {
	out := new(MeasurementResponse)
	err := c.cc.Invoke(ctx, "/satellitecommunication.SatelliteCommunication/GetMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *satelliteCommunicationClient) GetComputations(ctx context.Context, in *SatelliteFilter, opts ...grpc.CallOption) (*ComputationResponse, error) {
	out := new(ComputationResponse)
	err := c.cc.Invoke(ctx, "/satellitecommunication.SatelliteCommunication/GetComputations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SatelliteCommunicationServer is the server API for SatelliteCommunication service.
// All implementations must embed UnimplementedSatelliteCommunicationServer
// for forward compatibility
type SatelliteCommunicationServer interface {
	GetMeasurements(context.Context, *SatelliteFilter) (*MeasurementResponse, error)
	GetComputations(context.Context, *SatelliteFilter) (*ComputationResponse, error)
	mustEmbedUnimplementedSatelliteCommunicationServer()
}

// UnimplementedSatelliteCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedSatelliteCommunicationServer struct {
}

func (UnimplementedSatelliteCommunicationServer) GetMeasurements(context.Context, *SatelliteFilter) (*MeasurementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeasurements not implemented")
}
func (UnimplementedSatelliteCommunicationServer) GetComputations(context.Context, *SatelliteFilter) (*ComputationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputations not implemented")
}
func (UnimplementedSatelliteCommunicationServer) mustEmbedUnimplementedSatelliteCommunicationServer() {
}

// UnsafeSatelliteCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SatelliteCommunicationServer will
// result in compilation errors.
type UnsafeSatelliteCommunicationServer interface {
	mustEmbedUnimplementedSatelliteCommunicationServer()
}

func RegisterSatelliteCommunicationServer(s grpc.ServiceRegistrar, srv SatelliteCommunicationServer) {
	s.RegisterService(&SatelliteCommunication_ServiceDesc, srv)
}

func _SatelliteCommunication_GetMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SatelliteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatelliteCommunicationServer).GetMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/satellitecommunication.SatelliteCommunication/GetMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatelliteCommunicationServer).GetMeasurements(ctx, req.(*SatelliteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SatelliteCommunication_GetComputations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SatelliteFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SatelliteCommunicationServer).GetComputations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/satellitecommunication.SatelliteCommunication/GetComputations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SatelliteCommunicationServer).GetComputations(ctx, req.(*SatelliteFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// SatelliteCommunication_ServiceDesc is the grpc.ServiceDesc for SatelliteCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SatelliteCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "satellitecommunication.SatelliteCommunication",
	HandlerType: (*SatelliteCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeasurements",
			Handler:    _SatelliteCommunication_GetMeasurements_Handler,
		},
		{
			MethodName: "GetComputations",
			Handler:    _SatelliteCommunication_GetComputations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/satellite_communication/satellite_communication.proto",
}
